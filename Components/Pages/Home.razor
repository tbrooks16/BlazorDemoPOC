@page "/"
@using BlazorDemoPOC.Data
@using Microsoft.EntityFrameworkCore
@using BlazorDemoPOC.Components.UI.Blog
@using BlazorDemoPOC.Components.UI.Card

<PageTitle>Home</PageTitle>

<Blog Title="Blazor Demo" TableOfContents="toc">
    <p>This demo is to provide all the knowledge I have acquired from using Blazor. Below you'll find a list of topics.</p>
    <div class="flex gap-5 flex-wrap">
        @foreach(var topic in Topics){
            <Card className="w-fit flex-1 min-w-60">
                <CardHeader>
                    <CardTitle>
                        <a class="hover:underline" href="@topic.Url">@topic.Description</a>
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <p>
                        @kv[topic.Id]
                    </p>
                </CardContent>
            </Card>
        }
    </div>
    <p>
        I go over how to setup the project for Interactive Server and Interactive WebAssembly, 
        a brief demo of how dependency injection works,
        setting up a Form one with WASM and the other with Interactive Server, demonstrating the capabilities of server and client side validation,
        an explanation of how the render modes work in Blazor and their caveats,
        A simple demo of what is possible using the MudBlazor component library,
        and my personal opinion on MudBlazor. 
    </p>
</Blog>

@code{
    public Dictionary<string, string> toc = new(){};
    private List<Models.Topics> Topics = [
        new Models.Topics(){Id = 1, Description = "Project Setup & Integrating Tailwind", Url = "/setup"},
        new Models.Topics(){Id = 2, Description = "Dependency Injection", Url = "/di"},
        new Models.Topics(){Id = 3, Description = "A form with client and server validation", Url = "/forms"},
        new Models.Topics(){Id = 4, Description = "Render Modes & their caveats", Url = "/rendermodes"},
        new Models.Topics(){Id = 5, Description = "MudBlazor Component Show off", Url = "/mudblazor"},
        new Models.Topics(){Id = 6, Description = "Streaming", Url = "/streaming"},
        new Models.Topics(){Id = 7, Description = "The Good the Bad and the Ugly with Blazor", Url = "/review"},
    ];
    private Dictionary<int, string> kv {get; set;} = new(){
        {1, "I go over how to setup the project for Interactive Server and Interactive WebAssembly"},
        {2, "a brief demo of how dependency injection works"},
        {3, "setting up a Form one with WASM and the other with Interactive Server, demonstrating the capabilities of server and client side validation"},
        {4, "an explanation of how the render modes work in Blazor and their caveats"},
        {5, "A simple demo of what is possible using the MudBlazor component library"},
        {6, "How to take advantage of streaming"},
        {7, "My thoughts on Blazor and if it is suitable to be the successor of MVC"},
    };
}   